// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId       String
    sessionToken String   @unique
    expires      DateTime
}

model User {
    id              String    @id
    name            String?
    email           String?   @unique
    accounts        Account[]
    sessions        Session[]
    game            Game[]
    leaderboard     Leaderboard[]
}

model Leaderboard {
    id          Int     @id @default(autoincrement())
    user        User    @relation(fields: [user_id], references: [id])
    user_id     String
    score       Int     @default(0)
}

model Game {
    id              Int     @id @default(autoincrement())
    user            User    @relation(fields: [user_id], references: [id])
    user_id         String     
    correct         Boolean
    created_at      DateTime @default(now())
    album           Album[]  @relation("GameTrack")
    game_tracks     GameTrack[]
}

model GameTrack {
    game          Game     @relation(fields: [game_id], references: [id])
    game_id       Int
    album         Album    @relation(fields: [album_id], references: [id])
    album_id      String
    @@id([game_id, album_id])
}

model Album {
    id              String      @id
    name            String
    artist_id       Int
    album_cover     String
    games           Game[]      @relation("GameTrack")
    game_tracks     GameTrack[] 
    images          String[]
    artist          Artist      @relation(fields: [artist_id], references: [id])
}

model Artist {
    id          Int     @id @default(autoincrement())
    name        String
    album       Album[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
